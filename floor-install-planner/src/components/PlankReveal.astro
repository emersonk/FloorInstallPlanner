---
const { grid, expansionGapMm } = Astro.props;

// Calculate scaling so the room width fits 800px
const TARGET_PX = 800;
const room_width_mm = grid.cells[0].reduce((sum: number, cell: any) => sum + cell.length_mm, 0);
const room_height_mm = grid.cells.length > 0 ? grid.cells.map((row: any) => row[0].width_mm).reduce((sum: number, w: number) => sum + w, 0) : 0;
const scale = room_width_mm > 0 ? TARGET_PX / room_width_mm : 1;

// Calculate border thickness in px (to scale)
const borderPx = expansionGapMm ? (expansionGapMm * scale) : 0;
---

<style>
.plank-grid {
  display: grid;
  gap: 1px;
  background: #333;
  width: 100%;
  max-width: 1000px;
  margin: 0 auto;
  /* border is set inline for expansion gap, so remove here */
}
.plank-cell {
  min-width: 10px;
  min-height: 10px;
  background: #fff;
  border: 1px solid #333;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.7em;
  box-sizing: border-box;
  transition: background 0.2s;
}
.plank-cell[data-hidden="true"] {
  background: #fff;
  color: transparent;
  border: 1px solid #eee;
}
.add-plank-btn {
  margin: 1em auto;
  display: block;
  padding: 0.5em 1.5em;
  font-size: 1em;
  background: #222;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.add-plank-btn:disabled {
  background: #aaa;
  cursor: not-allowed;
}
</style>

<div id="plank-reveal-root">
  <div
    class="plank-grid"
    style={`grid-template-columns: ${grid.cells[0].map((cell: any) => (cell.length_mm * scale).toFixed(2) + 'px').join(' ')}; grid-template-rows: ${grid.cells.map((row: any) => (row[0].width_mm * scale).toFixed(2) + 'px').join(' ')}; border: ${borderPx.toFixed(2)}px solid #2196f3; box-sizing: content-box;`}
  >
    {grid.cells.map((row: any, rIdx: number) =>
      row.map((cell: any, cIdx: number) => (
        <div
          class="plank-cell"
          data-type={cell.type}
          data-laid-order={cell.laid_order || 0}
          data-hidden="true"
          style={`grid-row:${rIdx + 1};grid-column:${cIdx + 1};`}
        >
          {(cell.type === "full" || cell.type === "cut") && (
            <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;height:100%;">
              <span style="font-size:0.8em;font-weight:bold;">{cell.length_mm}x{cell.width_mm}</span>
              <span style="font-size:0.7em;color:#333;">#{cell.laid_order}</span>
            </div>
          )}
        </div>
      ))
    )}
  </div>
  <div style="display: flex; justify-content: center; gap: 1em;">
    <button id="undo-plank-btn" class="add-plank-btn" style="background: #888;">Undo Last Plank</button>
    <button id="add-plank-btn" class="add-plank-btn">Add Next Plank</button>
  </div>
</div>

<script type="module" is:inline>
  const root = document.getElementById('plank-reveal-root');
  const cells = Array.from(root.querySelectorAll('.plank-cell'));
  const btn = root.querySelector('#add-plank-btn');
  const undoBtn = root.querySelector('#undo-plank-btn');
  // Only planks (full/cut) have laid_order > 0
  const plankCells = cells.filter(cell => {
    const type = cell.getAttribute('data-type');
    return type === 'full' || type === 'cut';
  }).sort((a, b) => {
    return Number(a.getAttribute('data-laid-order')) - Number(b.getAttribute('data-laid-order'));
  });
  let revealed = 0;
  function revealNext() {
    if (revealed < plankCells.length) {
      plankCells[revealed].setAttribute('data-hidden', 'false');
      plankCells[revealed].style.color = '';
      revealed++;
      if (revealed === plankCells.length) {
        btn.disabled = true;
        btn.textContent = "All Planks Laid";
      }
      undoBtn.disabled = false;
    }
  }
  function undoReveal() {
    if (revealed > 0) {
      revealed--;
      plankCells[revealed].setAttribute('data-hidden', 'true');
      plankCells[revealed].style.color = 'transparent';
      btn.disabled = false;
      btn.textContent = "Add Next Plank";
      if (revealed === 0) {
        undoBtn.disabled = true;
      }
    }
  }
  // Hide all planks initially
  plankCells.forEach(cell => {
    cell.setAttribute('data-hidden', 'true');
    cell.style.color = 'transparent';
  });
  btn.addEventListener('click', revealNext);
  undoBtn.addEventListener('click', undoReveal);
  // Set initial button states
  undoBtn.disabled = true;
  // Optionally, reveal the first plank on load
  // revealNext();
</script>
